import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,b as n}from"./app-CiIr8rgP.js";const a={},t=n(`<h3 id="_1-什么是require-context" tabindex="-1"><a class="header-anchor" href="#_1-什么是require-context"><span>1.什么是require.context</span></a></h3><p>require.context是 Webpack 提供的一种方法，用于创建一个上下文模块，它包含了指定目录下符合匹配条件的所有模块。这个方法通常用于动态加载模块，比如自动注册 Vue 组件。</p><h3 id="_2-如何使用require-context" tabindex="-1"><a class="header-anchor" href="#_2-如何使用require-context"><span>2.如何使用require.context</span></a></h3><p>require.context接受三个参数。</p><ul><li>第一个参数是目录，可以是相对路径或绝对路径。</li><li>第二个参数是是否查找子目录，true表示查找子目录，false表示不查找子目录。</li><li>第三个参数是匹配文件的正则表达式。</li></ul><h3 id="_3-require-context-返回值" tabindex="-1"><a class="header-anchor" href="#_3-require-context-返回值"><span>3.require.context 返回值</span></a></h3><p>require.context 返回一个函数，这个函数有以下几个属性和方法。 keys: 一个函数，返回一个数组，包含上下文模块中所有符合条件的文件路径。 resolve: 一个函数，接受一个文件路径作为参数，返回该模块相对于项目根目录的解析路径。 id: 上下文模块的模块 ID，用于 module.hot.accept 中的热模块替换。</p><h3 id="_4-使用require-context的示例" tabindex="-1"><a class="header-anchor" href="#_4-使用require-context的示例"><span>4.使用require.context的示例</span></a></h3><p>假设我们有一个目录components，里面包含了多个Vue组件，我们可以使用require.context来动态加载这些组件。</p><h2 id="一、关于require-context第一种解释" tabindex="-1"><a class="header-anchor" href="#一、关于require-context第一种解释"><span>一、关于<code>require.context</code>第一种解释</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">components</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    subdir</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">vue</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// components.keys()的返回值：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">components</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#56B6C2;--shiki-light-font-weight:bold;--shiki-dark-font-weight:inherit;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./ComponentA.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./subdir/ComponentB.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> components</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#56B6C2;--shiki-light-font-weight:bold;--shiki-dark-font-weight:inherit;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">components</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 遍历文件路径数组，加载每个模块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 获取组件的配置对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> componentConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> components</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fileName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 获取组件的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // const componentName = fileName.replace(/^\\.\\//, &#39;&#39;).replace(/\\.\\w+$/, &#39;&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // const comp = componentConfig.default || componentConfig;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Vue.component(comp.name, comp) // 此处的name是组件属性定义的name,如果有页面没有写name值，会报错vue.runtime.esm.js?2b0e:100 Uncaught TypeError: Cannot read properties of undefined (reading &#39;toLowerCase&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fileName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 对于每个 fileName，调用 components(fileName) 加载对应的模块并获取其导出的配置对象。然后你可以使用该配置对象进行操作，如全局注册组件。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Vue.component(componentName, componentConfig.default || componentConfig);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">componentConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> componentConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 注册组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-注意事项"><span>5.注意事项</span></a></h3><p>使用require.context时需要注意以下几点：</p><ul><li>require.context只能用于Webpack打包的项目，因为它依赖于Webpack的模块系统。</li><li>require.context返回的函数只能用于静态加载模块，不能用于动态加载模块。</li><li>require.context返回的函数不能直接用于模块替换，需要使用module.hot.accept方法。</li></ul><h3 id="webpack-在处理-vue-文件时-会将其模板、脚本和样式部分转换成一个组件配置对象。" tabindex="-1"><a class="header-anchor" href="#webpack-在处理-vue-文件时-会将其模板、脚本和样式部分转换成一个组件配置对象。"><span>Webpack 在处理 vue 文件时，会将其模板、脚本和样式部分转换成一个组件配置对象。</span></a></h3><p>当使用 require.context 加载 vue 文件时，Webpack 会将这些文件转换为一个 JavaScript 模块，该模块导出的对象通常包含组件的完整配置，包括模板、脚本和样式。 因此，即使模板是 vue 文件中的 <code>&lt;template&gt;</code> 部分，Webpack 会将它们编译成一个配置对象。这个对象通常通过 componentConfig.default 或 componentConfig 访问。</p><h3 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6.总结</span></a></h3><p>require.context是一个非常有用的工具，可以帮助我们动态加载模块，提高代码的可维护性和可扩展性。但是，在使用require.context时需要注意它的限制和注意事项，避免出现一些常见的错误。 这样，我们就可以在Vue实例中使用这些组件了。</p><h2 id="二、关于require-context第二种解释" tabindex="-1"><a class="header-anchor" href="#二、关于require-context第二种解释"><span>二、关于<code>require.context</code>第二种解释</span></a></h2><p><code>require.context</code> 返回的是一个函数。这个函数可以用来加载匹配到的模块。<code>require.context</code> 是 Webpack 提供的一个特殊的 API，用于创建一个上下文模块（context module），它允许你动态地加载一组模块。</p><h3 id="require-context-的使用" tabindex="-1"><a class="header-anchor" href="#require-context-的使用"><span><code>require.context</code> 的使用</span></a></h3><p>当你调用 <code>require.context(directory, useSubdirectories, regExp)</code> 时，它会返回一个函数，这个函数可以用来加载在 <code>directory</code> 目录下匹配 <code>regExp</code> 的模块。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><ul><li><strong><code>directory</code></strong>: 需要搜索的目录的相对路径。</li><li><strong><code>useSubdirectories</code></strong>: 一个布尔值，指示是否搜索子目录。</li><li><strong><code>regExp</code></strong>: 一个正则表达式，用来匹配文件名。</li></ul><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h3><ul><li><strong>函数</strong>: <code>require.context</code> 返回一个函数，这个函数接受一个参数 <code>request</code>，表示相对路径（相对于 <code>directory</code> 的路径），并返回对应模块的 <code>exports</code>。</li></ul><h3 id="这个函数还附带三个属性" tabindex="-1"><a class="header-anchor" href="#这个函数还附带三个属性"><span>这个函数还附带三个属性：</span></a></h3><ol><li><strong><code>keys()</code></strong>: 返回一个数组，包含所有符合条件的模块的相对路径。</li><li><strong><code>resolve(request)</code></strong>: 返回 <code>request</code> 解析后的模块 ID。</li><li><strong><code>id</code></strong>: 返回上下文模块的 ID，这是一个字符串。</li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> modulesFiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#56B6C2;--shiki-light-font-weight:bold;--shiki-dark-font-weight:inherit;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">modulesFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出类似 [&#39;app.js&#39;, &#39;user.js&#39;]，这是 ./modules 目录下所有符合条件的文件路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> appModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> modulesFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">appModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这里加载了 &#39;./modules/app.js&#39; 模块，并访问其默认导出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ol><li><strong><code>modulesFiles</code></strong> 是 <code>require.context</code> 返回的函数。</li><li><strong><code>modulesFiles.keys()</code></strong> 返回了 <code>./modules</code> 目录中符合 <code>.js</code> 文件名匹配规则的所有文件路径。</li><li><strong><code>modulesFiles(&#39;./app.js&#39;)</code></strong> 加载并返回了 <code>./modules/app.js</code> 的模块导出内容。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>require.context</code> 返回的确实是一个函数，这个函数可以用来加载符合条件的模块，并且该函数提供了一些有用的方法来遍历或解析这些模块。</p>`,34),l=[t];function h(k,r){return e(),s("div",null,l)}const c=i(a,[["render",h],["__file","02.require.context.html.vue"]]),o=JSON.parse('{"path":"/vue/vue2/02.require.context.html","title":"02.require.context","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"02.require.context","description":"02.require.context"},"headers":[{"level":3,"title":"1.什么是require.context","slug":"_1-什么是require-context","link":"#_1-什么是require-context","children":[]},{"level":3,"title":"2.如何使用require.context","slug":"_2-如何使用require-context","link":"#_2-如何使用require-context","children":[]},{"level":3,"title":"3.require.context 返回值","slug":"_3-require-context-返回值","link":"#_3-require-context-返回值","children":[]},{"level":3,"title":"4.使用require.context的示例","slug":"_4-使用require-context的示例","link":"#_4-使用require-context的示例","children":[]},{"level":2,"title":"一、关于require.context第一种解释","slug":"一、关于require-context第一种解释","link":"#一、关于require-context第一种解释","children":[{"level":3,"title":"5.注意事项","slug":"_5-注意事项","link":"#_5-注意事项","children":[]},{"level":3,"title":"Webpack 在处理 vue 文件时，会将其模板、脚本和样式部分转换成一个组件配置对象。","slug":"webpack-在处理-vue-文件时-会将其模板、脚本和样式部分转换成一个组件配置对象。","link":"#webpack-在处理-vue-文件时-会将其模板、脚本和样式部分转换成一个组件配置对象。","children":[]},{"level":3,"title":"6.总结","slug":"_6-总结","link":"#_6-总结","children":[]}]},{"level":2,"title":"二、关于require.context第二种解释","slug":"二、关于require-context第二种解释","link":"#二、关于require-context第二种解释","children":[{"level":3,"title":"require.context 的使用","slug":"require-context-的使用","link":"#require-context-的使用","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"这个函数还附带三个属性：","slug":"这个函数还附带三个属性","link":"#这个函数还附带三个属性","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1725680666000,"updatedTime":1731211085000,"contributors":[{"name":"liznlin","email":"3215144676@qq.com","commits":1}]},"readingTime":{"minutes":4.21,"words":1263},"filePathRelative":"vue/vue2/02.require.context.md","localizedDate":"2024年9月7日"}');export{c as comp,o as data};
